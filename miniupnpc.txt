UPnP port forwarding
The second obstacle that prevents the connection is a router’s NAT, which hides all devices in the “internal” router network (LAN) 
from inbound Internet connections.

To route “external” (WAN) connections to the Raspberry Pi we will employ port forwarding on a router. Because manual configuration 
of port forwarding rules on each router is not a portable solution (besides, routers also use DHCP to assign dynamic IP addresses 
to LAN devices, so a MAC-based DHCP reservation is additionally needed), we will rely on Universal Plug and Play (UPnP) protocol 
to dynamically configure proper port forwarding rules.

Most todays routers support both port forwarding and UPnP, so in most cases Raspberry Pi will be able to enable external access automatically.

We’ll rely on miniupnpc UPnP client, which can be installed as miniupnpc package via your OS package manager.

First of all, let’s ensure that our current router supports UPnP:

upnpc -l
This command should:

enumerate all supported UPnP devices on local network,
display their internal- and external IP addresses,
list their current port forwarding rules.
If router supports UPnP, we can add a port forwarding (for SSH protocol):

upnpc -e 'SSH on Raspberry Pi' -r 22 TCP
After that, we may verify the result by reissuing upnpc -l, the output should contain something like:

 TCP 22->192.168.0.2:22 
Compare this IP address with the internal IP address of the device, which can be displayed via:

ip -4 addr show dev eth0
If you need to access other services on Raspberry Pi (besides SSH), you may also configure additional port forwardings.

After both DNS and port forwarding are configured, it should be possible to establish an SSH connection to the Raspberry Pi from the Internet:

ssh user@your.domain.name
However, please keep in mind, that most routers are not able to establish “external” connections from the internal network itself, so a separate Internet
connection is needed to fully test the setup.

Unattended configuration
Now, when all the subsystems are checked, we are ready to setup unattended configuration.

Create a shell script in editor:

sudo nano /usr/local/bin/redirect.sh
insert the following content (don’t forget to specify your real DDNS URL there):

#!/bin/bash
curl -ks https://your-personal-url > /dev/null
upnpc -e 'SSH on Raspberry Pi' -r 22 TCP > /dev/null
Then configure Cron to periodically run this script (every 30 minutes):

sudo crontab -e
add the following line:

*/30 * * * * /usr/local/bin/redirect.sh
In this way, Raspberry Pi will automatically update both domain IP and port forwarding, so we should be able to access the device from the 
Internet even after provider / router / IP address change (however, it may take some time before re-configuration happens).

On-demand configuration
To avoid the delay before re-configuration, we may configure network manager to automatically run our configuration script when Ethernet 
cable is plugged in.

If you use Debian-based OS (like Raspbian), add post-up option to /etc/network/interfaces file:

auto eth0
allow-hotplug eth0
iface eth0 inet dhcp
post-up '/usr/local/bin/redirect.sh||true'
On Arch Linux you may use netctl‘s ifplugd for the same purpose — install ifplugd package, create a network profile /etc/netctl/redirection with the following content:

Interface=eth0
Connection=ethernet
IP=dhcp
ExecUpPost='/usr/local/bin/redirect.sh||true'
…then enable ifplugd service for eth0 interface:

sudo systemctl enable netctl-ifplugd@eth0.service
sudo systemctl start netctl-ifplugd@eth0.service
Now the configuration script should be run automatically when Ethernet connection is established.

Security
Enabling global Internet access to your Raspberry Pi device is definitely convenient. However, you should keep in mind, that such access must be always complemented 
by adequately hardened security, namely:

Limit root login via SSH.
Generate a strong SSH key.
Disable password login via SSH.
Configure firewall rules.

Using UPnP IGD for simpler port forwarding
2013-02-17

If your router or ADSL modem supports the UPnP Internet Gateway Device protocol (and most of them do), you can forward ports to services on your network much more easily and more flexibly than through the admin interface.

I had to buy a new ADSL modem/wireless router this week, as my old one was no longer working properly: instead of the normal slightly disappointing 6Mbps I usually get here in ‘Digital Britain’, it was down to a few hundred kbps, with highly variable performance. I thought it might be the slightly swollen capacitor on the board, so I replaced that, but to no avail. Fortunately, you can now buy decent ADSL modem/wireless routers from the supermarket for not much money, so, whilst it did cost me £44, it was a fairly easy problem to solve. As a fringe benefit, I now have a much faster wireless network in my flat, so it’s not all bad.

My new router has all kinds of complex options on its management interface, but it’s much more limited than its predecessor in one respect: port forwarding. On the old one, I could forward arbitrarily many ports, and I could choose to map an external port to a different internal one—useful for slightly obfuscating SSH access without having to change the configuration of the internal network. On my new router, however, I can only forward ten distinct port ranges, and the external and internal ports must match. At least, that’s all I can do through the clunky and slow management interface. But it supports UPnP, and UPnP does allow mapping an external port to a different internal port.

Enter MiniUPnP, a project that provides a client and a daemon that implement the UPnP Internet Gateway Device specifications. We only need the client, which is available on Ubuntu in the miniupnpc package.

You can then forward a port as simply as:

upnpc -a 192.168.1.2 22 3333 TCP
This will forward TCP connections from the internet on port 3333 to port 22 on 192.168.1.2. To remove it, use:

upnpc -d 3333 TCP
That’s a bit slow, though, as it has to discover the router every time. You can speed that up by supplying the root description URL. First, find it:

upnpc -l | grep desc:
Then supply it as the -u parameter every time you use upmpc, e.g.:

upnpc -u http://192.168.1.1:80/DeviceDescription.xml -l
The remaining step is to set up the connection automatically. As my server is configured via DHCP, I can make this happen every time it’s connected to the local network by
putting an executable script in /etc/dhcp/dhclient-exit-hooks.d/ (I called mine upnp, but the name doesn’t really matter). I’ve chosen to use upnpc to tell me the local IP
address of the server:

#!/bin/bash
export LC_ALL=C

upnpc="upnpc -u http://192.168.1.1:80/DeviceDescription.xml"
external=3333
port=22
ip=$($upnpc -l | grep "Local LAN ip address" | cut -d: -f2)

$upnpc -d $external TCP >/dev/null 2>&1
$upnpc -a $ip $port $external TCP >/dev/null 2>&1
Now, as soon as the server gets a DHCP lease, it will delete any existing port forwarding and forward port 3333 to its SSH server. The really nice thing is that the router
doesn’t need to know about the server
#!/bin/bash
#~/bin/upnpPortMapper.sh
#sudo apt-get install miniupnpc
#crontab -l | grep upnp || echo $(crontab -l ; echo '*/5 * * * * ~/bin/upnpPortMapper.sh  >/dev/null 2>&1') | crontab -

export LC_ALL=C
router=$(ip r | grep default | cut -d " " -f 3)
gateway=$(upnpc -l | grep "desc: http://$router:[0-9]*/rootDesc.xml" | cut -d " " -f 3)
ip=$(upnpc -l | grep "Local LAN ip address" | cut -d: -f2)

external=80
port=80
upnpc -u  $gateway -d $external TCP
upnpc -u  $gateway -e "Web mapping for RaspberryPi" -a $ip $port $external TCP 

external=443
port=443
upnpc -u  $gateway -d $external TCP
upnpc -u  $gateway -d $external UDP
upnpc -u  $gateway -e "TLS Web mapping for RaspberryPi" -a $ip $port $external TCP 
